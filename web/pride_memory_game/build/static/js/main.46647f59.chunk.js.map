{"version":3,"sources":["images/pride.jpg","images sync /^/.//.*$","images/alan.jpg","images/confetti.png","images/dana.jpg","images/ellen.jpg","images/ofra.jpg","images/rupaul.jpg","images/rupaul.png","images/spongebob.png","components/Card/Card.js","config/initializeDeck.js","utils/utils.js","components/Board/Board.js","components/Modal/Modal.js","components/Counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Card","name","cardImage","handleFlip","handleBackFlip","useState","isVisible","setIsVisible","show","hide","isFlipped","flipDirection","key","className","alt","src","pride","onClick","require","initializeDeck","numOfCards","length","getRandomCards","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","Board","handleFindMatch","cards","flippedCards","setFlippedCards","matchingCards","setMatchingCards","console","log","newElement","setTimeout","card","Modal","content","hidden","headline","visible","setVisible","onClose","split","item","i","Counter","count","App","counterMatchPair","setCounterMatchPair","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46647f59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pride.7c5fbad4.jpg\";","var map = {\n\t\"./alan.jpg\": 19,\n\t\"./confetti.png\": 20,\n\t\"./dana.jpg\": 21,\n\t\"./ellen.jpg\": 22,\n\t\"./ofra.jpg\": 23,\n\t\"./pride.jpg\": 5,\n\t\"./rupaul.jpg\": 24,\n\t\"./rupaul.png\": 25,\n\t\"./spongebob.png\": 26\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 18;","module.exports = __webpack_public_path__ + \"static/media/alan.e4c7e43f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/confetti.81c76252.png\";","module.exports = __webpack_public_path__ + \"static/media/dana.d51a7cd1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ellen.42ac9ccb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ofra.771c34d9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rupaul.6a2ef227.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rupaul.f4532d84.png\";","module.exports = __webpack_public_path__ + \"static/media/spongebob.6050f3f6.png\";","import React, {useState} from \"react\";\nimport ReactCardFlip from 'react-card-flip';\nimport pride from '../../images/pride.jpg'\n\n\nconst Card = ({name, cardImage, handleFlip, handleBackFlip}) => {\n    const [isVisible, setIsVisible] = useState(false);\n\n    const show = () => {\n        setIsVisible(true);\n    }\n\n    const hide = () => {\n        setIsVisible(false);\n    }\n\n    return (\n        <ReactCardFlip\n            isFlipped={isVisible}\n            flipDirection=\"vertical\">\n\n            <div key=\"front\" className={`front`}>\n                <img\n                    alt={'pride_month'}\n                    src={pride}\n                    onClick={() => handleFlip(name, show, hide)}/>\n            </div>\n\n            <div key=\"back\" className={`back`}>\n                <img\n                    alt={'gay_character'}\n                    src={require(`../../images/${cardImage}`)}\n                />\n            </div>\n        </ReactCardFlip>\n    )\n}\n\nexport default Card;\n\n","import Card from \"../components/Card/Card\";\nimport React from \"react\";\nimport shuffle from \"../utils/utils\";\n\nlet initializeDeck = [\n    {   id: 1,\n        name: 'spongebob',\n        cardImage: 'spongebob.png' },\n    {   id: 1,\n        name: 'spongebob',\n        cardImage: 'spongebob.png' },\n    {   id: 2,\n        name: 'ofra',\n        cardImage: 'ofra.jpg' },\n    {   id: 2,\n        name: 'ofra',\n        cardImage: 'ofra.jpg' },\n    {   id: 3,\n        name: 'ellen',\n        cardImage: 'ellen.jpg' },\n    {   id: 3,\n        name: 'ellen',\n        cardImage: 'ellen.jpg' },\n    {   id: 4,\n        name: 'dana',\n        cardImage: 'dana.jpg' },\n    {   id: 4,\n        name: 'dana',\n        cardImage: 'dana.jpg' },\n    {   id: 5,\n        name: 'rupaul',\n        cardImage: 'rupaul.png' },\n    {   id: 5,\n        name: 'rupaul',\n        cardImage: 'rupaul.png' },\n    {   id: 6,\n        name: 'alan',\n        cardImage: 'alan.jpg' },\n    {   id: 6,\n        name: 'alan',\n        cardImage: 'alan.jpg' },\n];\n\nexport const numOfCards = initializeDeck.length;\n\nexport const getRandomCards= () => {\n    return shuffle(initializeDeck);\n}\n\n// export default getRandomCards() ;\n\n","export default function shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\n","import React, {useCallback, useState} from \"react\";\n\nimport Card from \"../Card/Card\";\nimport {getRandomCards} from \"../../config/initializeDeck\";\n\nconst Board = ({handleFindMatch}) => {\n    const [cards, setCards] = useState(getRandomCards)\n    const [flippedCards, setFlippedCards] = useState([]);\n    const [matchingCards, setMatchingCards] = useState([]);\n\n    //TODO : add Reset button\n\n    // const reset = () => {\n    //     setMatchingCards([]);\n    //     setFlippedCards([]);\n    //     setCards(getRandomCards())\n    // }\n\n    const handleFlip = (name, show, hide) => {\n        let length = flippedCards.length;\n\n        if (length < 2) { //otherwise just 1 card is open\n            console.log(length);\n            show();\n            const newElement = {name, hide};\n            setFlippedCards([...flippedCards, newElement]);\n            length = length + 1;\n\n            if (length === 2) {\n                if (flippedCards[0].name === name) {\n                    handleFindMatch();\n                    setMatchingCards([...matchingCards, name]);\n                    setFlippedCards([]);\n                } else {\n                    setTimeout(() => {\n                        flippedCards[0].hide();\n                        hide();\n                        setFlippedCards([]);\n                    }, 1200);\n                }\n            }\n        }\n    }\n\n    return (\n        <div className='board'>\n            {cards.map((card) =>\n                <Card\n                    className={'card'}\n                    name={card.name}\n                    cardImage={card.cardImage}\n                    handleFlip={handleFlip}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default Board;","import React, {useState} from 'react';\nimport Rodal from 'rodal';\n\n// include styles\nconst Modal = ({content, hidden, headline}) => {\n    const [visible, setVisible] = useState(true);\n\n    const show = () => {\n        setVisible(true);\n    }\n\n    const hide = () => {\n        setVisible(false)\n    }\n\n    const instructions = `Turn over any two cards. \\n\n                          Found a match? great! \\n\n                          If not - try to remember for next time. \\n\n                          The game is over when all the cards have been matched.`;\n\n\n\n    const breakText = (text) => {\n        return text.split('\\n').map((item, i) => <p key={i}>{item}</p>);\n    }\n\n\n    return (\n        <div>\n\n            <Rodal visible={visible} onClose={hide}>\n                <p className={'headline rainbow-text'}>{headline}</p>\n\n                <p className={'modal-content'}>\n                    {content === 'instructions' ?\n                        breakText(instructions) :\n                      ''}\n                </p>\n                <button\n                    className={`rainbow rainbow-1 ${hidden === true ? 'hidden' : ''}`}\n                    onClick={() => {\n                        hide();\n                    }}\n                >\n                    Start Game\n                </button>\n            </Rodal>\n        </div>\n    );\n\n}\nexport default Modal;\n","import React from \"react\";\nimport {numOfCards} from '../../config/initializeDeck'\nimport Modal from \"../Modal/Modal\";\n\nconst Counter = ({count}) => {\n    const isDone = (count === numOfCards / 2);\n    if (isDone) {\n        return (\n            <Modal hidden={true} headline={'Thanks For Playing!'}/>\n        );\n    } else return (\n        <h2 className={'counter'}><span>{count}</span> <br/> matches</h2>\n    );\n}\n\nexport default Counter;","import React, { useState} from 'react';\nimport Board from './components/Board/Board';\nimport Counter from \"./components/Counter/Counter\";\nimport Modal from \"./components/Modal/Modal\";\nimport '../src/styles/main.css';\n\nfunction App() {\nlet [counterMatchPair, setCounterMatchPair] = useState(0);\n\nconst handleFindMatch = () => {\n    setCounterMatchPair(++counterMatchPair);\n}\n    return (\n        <div className=\"App\">\n            <Modal\n                headline={'Welcome!'}\n                content={'instructions'}\n            />\n            <h1 className='happy-pride-month'>Happy Pride Month!</h1>\n            <Board handleFindMatch={handleFindMatch}/>\n            <Counter count={counterMatchPair}/>\n        </div>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}